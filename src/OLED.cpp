/*
 * OLED.cpp
 *
 *  Created on: 2016��5��22��
 *      Author: Romeli
 */
#include "OLED.h"
#include "stdio.h"

#ifdef I2C_Intface
#include "I2C.h"
#endif
#ifdef SPI_Intface
#include "U_SPI1.h"

#define CS_PIN GPIO_Pin_3
#define DC_PIN GPIO_Pin_4
#define RES_PIN GPIO_Pin_6

#define CS_SET (GPIOA->BSRR = CS_PIN)
#define DC_SET (GPIOA->BSRR = DC_PIN)
#define RES_SET (GPIOA->BSRR = RES_PIN)

#define CS_RESET (GPIOA->BRR = CS_PIN)
#define DC_RESET (GPIOA->BRR = DC_PIN)
#define RES_RESET (GPIOA->BRR = RES_PIN)

#endif

const unsigned char F6x8[][6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sp
		0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, // !
		0x00, 0x00, 0x07, 0x00, 0x07, 0x00, // "
		0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14, // #
		0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, // $
		0x00, 0x62, 0x64, 0x08, 0x13, 0x23, // %
		0x00, 0x36, 0x49, 0x55, 0x22, 0x50, // &
		0x00, 0x00, 0x05, 0x03, 0x00, 0x00, // '
		0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, // (
		0x00, 0x00, 0x41, 0x22, 0x1c, 0x00, // )
		0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, // *
		0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, // +
		0x00, 0x00, 0x00, 0xA0, 0x60, 0x00, // ,
		0x00, 0x08, 0x08, 0x08, 0x08, 0x08, // -
		0x00, 0x00, 0x60, 0x60, 0x00, 0x00, // .
		0x00, 0x20, 0x10, 0x08, 0x04, 0x02, // /
		0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
		0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, // 1
		0x00, 0x42, 0x61, 0x51, 0x49, 0x46, // 2
		0x00, 0x21, 0x41, 0x45, 0x4B, 0x31, // 3
		0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, // 4
		0x00, 0x27, 0x45, 0x45, 0x45, 0x39, // 5
		0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
		0x00, 0x01, 0x71, 0x09, 0x05, 0x03, // 7
		0x00, 0x36, 0x49, 0x49, 0x49, 0x36, // 8
		0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, // 9
		0x00, 0x00, 0x36, 0x36, 0x00, 0x00, // :
		0x00, 0x00, 0x56, 0x36, 0x00, 0x00, // ;
		0x00, 0x08, 0x14, 0x22, 0x41, 0x00, // <
		0x00, 0x14, 0x14, 0x14, 0x14, 0x14, // =
		0x00, 0x00, 0x41, 0x22, 0x14, 0x08, // >
		0x00, 0x02, 0x01, 0x51, 0x09, 0x06, // ?
		0x00, 0x32, 0x49, 0x59, 0x51, 0x3E, // @
		0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C, // A
		0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, // B
		0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, // C
		0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, // D
		0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, // E
		0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, // F
		0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A, // G
		0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, // H
		0x00, 0x00, 0x41, 0x7F, 0x41, 0x00, // I
		0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, // J
		0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, // K
		0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, // L
		0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, // M
		0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, // N
		0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, // O
		0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, // P
		0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
		0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, // R
		0x00, 0x46, 0x49, 0x49, 0x49, 0x31, // S
		0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, // T
		0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, // U
		0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, // V
		0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, // W
		0x00, 0x63, 0x14, 0x08, 0x14, 0x63, // X
		0x00, 0x07, 0x08, 0x70, 0x08, 0x07, // Y
		0x00, 0x61, 0x51, 0x49, 0x45, 0x43, // Z
		0x00, 0x00, 0x7F, 0x41, 0x41, 0x00, // [
		0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55, // 55
		0x00, 0x00, 0x41, 0x41, 0x7F, 0x00, // ]
		0x00, 0x04, 0x02, 0x01, 0x02, 0x04, // ^
		0x00, 0x40, 0x40, 0x40, 0x40, 0x40, // _
		0x00, 0x00, 0x01, 0x02, 0x04, 0x00, // '
		0x00, 0x20, 0x54, 0x54, 0x54, 0x78, // a
		0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, // b
		0x00, 0x38, 0x44, 0x44, 0x44, 0x20, // c
		0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, // d
		0x00, 0x38, 0x54, 0x54, 0x54, 0x18, // e
		0x00, 0x08, 0x7E, 0x09, 0x01, 0x02, // f
		0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, // g
		0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, // h
		0x00, 0x00, 0x44, 0x7D, 0x40, 0x00, // i
		0x00, 0x40, 0x80, 0x84, 0x7D, 0x00, // j
		0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, // k
		0x00, 0x00, 0x41, 0x7F, 0x40, 0x00, // l
		0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, // m
		0x00, 0x7C, 0x08, 0x04, 0x04, 0x78, // n
		0x00, 0x38, 0x44, 0x44, 0x44, 0x38, // o
		0x00, 0xFC, 0x24, 0x24, 0x24, 0x18, // p
		0x00, 0x18, 0x24, 0x24, 0x18, 0xFC, // q
		0x00, 0x7C, 0x08, 0x04, 0x04, 0x08, // r
		0x00, 0x48, 0x54, 0x54, 0x54, 0x20, // s
		0x00, 0x04, 0x3F, 0x44, 0x40, 0x20, // t
		0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C, // u
		0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, // v
		0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, // w
		0x00, 0x44, 0x28, 0x10, 0x28, 0x44, // x
		0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C, // y
		0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, // z
		0x14, 0x14, 0x14, 0x14, 0x14, 0x14, // horiz lines
		};
const unsigned char F8x16[][16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, // 0
		0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
		0x30, 0x00, 0x00,
		0x00, //!1
		0x00, 0x10, 0x0C, 0x06, 0x10, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, //"2
		0x40, 0xC0, 0x78, 0x40, 0xC0, 0x78, 0x40, 0x00, 0x04, 0x3F, 0x04, 0x04,
		0x3F, 0x04, 0x04,
		0x00, //#3
		0x00, 0x70, 0x88, 0xFC, 0x08, 0x30, 0x00, 0x00, 0x00, 0x18, 0x20, 0xFF,
		0x21, 0x1E, 0x00,
		0x00, //$4
		0xF0, 0x08, 0xF0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x00, 0x21, 0x1C, 0x03,
		0x1E, 0x21, 0x1E,
		0x00, //%5
		0x00, 0xF0, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x21, 0x23, 0x24,
		0x19, 0x27, 0x21,
		0x10, //&6
		0x10, 0x16, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, //'7
		0x00, 0x00, 0x00, 0xE0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07,
		0x18, 0x20, 0x40,
		0x00, //(8
		0x00, 0x02, 0x04, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18,
		0x07, 0x00, 0x00,
		0x00, //)9
		0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F,
		0x01, 0x02, 0x02,
		0x00, //*10
		0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x1F,
		0x01, 0x01, 0x01,
		0x00, //+11
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xB0, 0x70, 0x00,
		0x00, 0x00, 0x00,
		0x00, //,12
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01,
		0x01, //-13
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
		0x00, 0x00, 0x00,
		0x00, //.14
		0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x04, 0x00, 0x60, 0x18, 0x06,
		0x01, 0x00, 0x00,
		0x00, ///15
		0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x0F, 0x10, 0x20,
		0x20, 0x10, 0x0F,
		0x00, //016
		0x00, 0x10, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F,
		0x20, 0x20, 0x00,
		0x00, //117
		0x00, 0x70, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x30, 0x28, 0x24,
		0x22, 0x21, 0x30,
		0x00, //218
		0x00, 0x30, 0x08, 0x88, 0x88, 0x48, 0x30, 0x00, 0x00, 0x18, 0x20, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //319
		0x00, 0x00, 0xC0, 0x20, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x07, 0x04, 0x24,
		0x24, 0x3F, 0x24,
		0x00, //420
		0x00, 0xF8, 0x08, 0x88, 0x88, 0x08, 0x08, 0x00, 0x00, 0x19, 0x21, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //521
		0x00, 0xE0, 0x10, 0x88, 0x88, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //622
		0x00, 0x38, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3F,
		0x00, 0x00, 0x00,
		0x00, //723
		0x00, 0x70, 0x88, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x1C, 0x22, 0x21,
		0x21, 0x22, 0x1C,
		0x00, //824
		0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x31, 0x22,
		0x22, 0x11, 0x0F,
		0x00, //925
		0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
		0x30, 0x00, 0x00,
		0x00, //:26
		0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60,
		0x00, 0x00, 0x00,
		0x00, //;27
		0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20,
		0x00, //<28
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x04, 0x04, 0x04, 0x04,
		0x04, 0x04, 0x04,
		0x00, //=29
		0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08,
		0x04, 0x02, 0x01,
		0x00, //>30
		0x00, 0x70, 0x48, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30,
		0x36, 0x01, 0x00,
		0x00, //?31
		0xC0, 0x30, 0xC8, 0x28, 0xE8, 0x10, 0xE0, 0x00, 0x07, 0x18, 0x27, 0x24,
		0x23, 0x14, 0x0B,
		0x00, //@32
		0x00, 0x00, 0xC0, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x3C, 0x23, 0x02,
		0x02, 0x27, 0x38,
		0x20, //A33
		0x08, 0xF8, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //B34
		0xC0, 0x30, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00, 0x07, 0x18, 0x20, 0x20,
		0x20, 0x10, 0x08,
		0x00, //C35
		0x08, 0xF8, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x20, 0x3F, 0x20, 0x20,
		0x20, 0x10, 0x0F,
		0x00, //D36
		0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x20,
		0x23, 0x20, 0x18,
		0x00, //E37
		0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x00,
		0x03, 0x00, 0x00,
		0x00, //F38
		0xC0, 0x30, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x07, 0x18, 0x20, 0x20,
		0x22, 0x1E, 0x02,
		0x00, //G39
		0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x21, 0x01,
		0x01, 0x21, 0x3F,
		0x20, //H40
		0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F,
		0x20, 0x20, 0x00,
		0x00, //I41
		0x00, 0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0xC0, 0x80, 0x80, 0x80,
		0x7F, 0x00, 0x00,
		0x00, //J42
		0x08, 0xF8, 0x88, 0xC0, 0x28, 0x18, 0x08, 0x00, 0x20, 0x3F, 0x20, 0x01,
		0x26, 0x38, 0x20,
		0x00, //K43
		0x08, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20,
		0x20, 0x20, 0x30,
		0x00, //L44
		0x08, 0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x08, 0x00, 0x20, 0x3F, 0x00, 0x3F,
		0x00, 0x3F, 0x20,
		0x00, //M45
		0x08, 0xF8, 0x30, 0xC0, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x20, 0x00,
		0x07, 0x18, 0x3F,
		0x00, //N46
		0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x10, 0x20, 0x20,
		0x20, 0x10, 0x0F,
		0x00, //O47
		0x08, 0xF8, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x20, 0x3F, 0x21, 0x01,
		0x01, 0x01, 0x00,
		0x00, //P48
		0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x18, 0x24, 0x24,
		0x38, 0x50, 0x4F,
		0x00, //Q49
		0x08, 0xF8, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x3F, 0x20, 0x00,
		0x03, 0x0C, 0x30,
		0x20, //R50
		0x00, 0x70, 0x88, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x38, 0x20, 0x21,
		0x21, 0x22, 0x1C,
		0x00, //S51
		0x18, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x18, 0x00, 0x00, 0x00, 0x20, 0x3F,
		0x20, 0x00, 0x00,
		0x00, //T52
		0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x00, 0x1F, 0x20, 0x20,
		0x20, 0x20, 0x1F,
		0x00, //U53
		0x08, 0x78, 0x88, 0x00, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x07, 0x38,
		0x0E, 0x01, 0x00,
		0x00, //V54
		0xF8, 0x08, 0x00, 0xF8, 0x00, 0x08, 0xF8, 0x00, 0x03, 0x3C, 0x07, 0x00,
		0x07, 0x3C, 0x03,
		0x00, //W55
		0x08, 0x18, 0x68, 0x80, 0x80, 0x68, 0x18, 0x08, 0x20, 0x30, 0x2C, 0x03,
		0x03, 0x2C, 0x30,
		0x20, //X56
		0x08, 0x38, 0xC8, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x20, 0x3F,
		0x20, 0x00, 0x00,
		0x00, //Y57
		0x10, 0x08, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x20, 0x38, 0x26, 0x21,
		0x20, 0x20, 0x18,
		0x00, //Z58
		0x00, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F,
		0x40, 0x40, 0x40,
		0x00, //[59
		0x00, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x06, 0x38, 0xC0,
		0x00, //\60
		0x00, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40,
		0x7F, 0x00, 0x00,
		0x00, //]61
		0x00, 0x00, 0x04, 0x02, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, //^62
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80,
		0x80, //_63
		0x00, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, //`64
		0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x19, 0x24, 0x22,
		0x22, 0x22, 0x3F,
		0x20, //a65
		0x08, 0xF8, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //b66
		0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x20,
		0x20, 0x20, 0x11,
		0x00, //c67
		0x00, 0x00, 0x00, 0x80, 0x80, 0x88, 0xF8, 0x00, 0x00, 0x0E, 0x11, 0x20,
		0x20, 0x10, 0x3F,
		0x20, //d68
		0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22,
		0x22, 0x22, 0x13,
		0x00, //e69
		0x00, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x18, 0x00, 0x20, 0x20, 0x3F,
		0x20, 0x20, 0x00,
		0x00, //f70
		0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x6B, 0x94, 0x94,
		0x94, 0x93, 0x60,
		0x00, //g71
		0x08, 0xF8, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00,
		0x00, 0x20, 0x3F,
		0x20, //h72
		0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F,
		0x20, 0x20, 0x00,
		0x00, //i73
		0x00, 0x00, 0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x80,
		0x80, 0x7F, 0x00,
		0x00, //j74
		0x08, 0xF8, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x24, 0x02,
		0x2D, 0x30, 0x20,
		0x00, //k75
		0x00, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F,
		0x20, 0x20, 0x00,
		0x00, //l76
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x20, 0x00,
		0x3F, 0x20, 0x00,
		0x3F, //m77
		0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00,
		0x00, 0x20, 0x3F,
		0x20, //n78
		0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20,
		0x20, 0x20, 0x1F,
		0x00, //o79
		0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xA1, 0x20,
		0x20, 0x11, 0x0E,
		0x00, //p80
		0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0E, 0x11, 0x20,
		0x20, 0xA0, 0xFF,
		0x80, //q81
		0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x20, 0x3F, 0x21,
		0x20, 0x00, 0x01,
		0x00, //r82
		0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x33, 0x24, 0x24,
		0x24, 0x24, 0x19,
		0x00, //s83
		0x00, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
		0x20, 0x20, 0x00,
		0x00, //t84
		0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x1F, 0x20, 0x20,
		0x20, 0x10, 0x3F,
		0x20, //u85
		0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x01, 0x0E, 0x30,
		0x08, 0x06, 0x01,
		0x00, //v86
		0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x0F, 0x30, 0x0C, 0x03,
		0x0C, 0x30, 0x0F,
		0x00, //w87
		0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x31, 0x2E,
		0x0E, 0x31, 0x20,
		0x00, //x88
		0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x81, 0x8E, 0x70,
		0x18, 0x06, 0x01,
		0x00, //y89
		0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x21, 0x30, 0x2C,
		0x22, 0x21, 0x30,
		0x00, //z90
		0x00, 0x00, 0x00, 0x00, 0x80, 0x7C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x3F, 0x40,
		0x40, //{91
		0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0x00, 0x00,
		0x00, //|92
		0x00, 0x02, 0x02, 0x7C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3F,
		0x00, 0x00, 0x00,
		0x00, //}93
		0x00, 0x06, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, //~94
		};
const unsigned char F16x16[][32] = { { 0x00, 0x00, 0x18, 0x16, 0x10, 0xD0, 0xB8,
		0x97, 0x90, 0x90, 0x90, 0x92, 0x94, 0x10, 0x00, 0x00, 0x00, 0x20, 0x10,
		0x8C, 0x83, 0x80, 0x41, 0x46, 0x28, 0x10, 0x28, 0x44, 0x43, 0x80, 0x80,
		0x00 },/*"��",0*/

{ 0x80, 0x40, 0x30, 0x1E, 0x10, 0x10, 0x10, 0xFF, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x00, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7F, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x00 },/*"��",1*/

{ 0x00, 0xF8, 0x0C, 0x0B, 0x08, 0x08, 0xF8, 0x40, 0x30, 0x8F, 0x08, 0x08, 0x08,
		0xF8, 0x00, 0x00, 0x00, 0x7F, 0x21, 0x21, 0x21, 0x21, 0x7F, 0x00, 0x00,
		0x00, 0x43, 0x80, 0x40, 0x3F, 0x00, 0x00 },/*"��",2*/

{ 0x20, 0x24, 0x24, 0xA4, 0xFE, 0x23, 0x22, 0x20, 0xFC, 0x04, 0x04, 0x04, 0x04,
		0xFC, 0x00, 0x00, 0x10, 0x08, 0x06, 0x01, 0xFF, 0x01, 0x06, 0x80, 0x63,
		0x19, 0x01, 0x01, 0x09, 0x33, 0xC0, 0x00 },/*"��",3*/

{ 0x80, 0x40, 0x20, 0x90, 0x88, 0x86, 0x80, 0x80, 0x80, 0x83, 0x8C, 0x10, 0x20,
		0x40, 0x80, 0x00, 0x00, 0x80, 0x40, 0x20, 0x18, 0x07, 0x00, 0x40, 0x80,
		0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"��",4*/

{ 0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x10, 0xE8, 0x27, 0x24, 0xE4, 0x34, 0x2C,
		0xE0, 0x00, 0x00, 0x02, 0x42, 0x81, 0x7F, 0x00, 0x84, 0x84, 0x47, 0x24,
		0x1C, 0x07, 0x1C, 0x24, 0x47, 0x84, 0x00 },/*"��",5*/
{ 0x00, 0x00, 0x18, 0x16, 0x10, 0xD0, 0xB8, 0x97, 0x90, 0x90, 0x90, 0x92, 0x94,
		0x10, 0x00, 0x00, 0x00, 0x20, 0x10, 0x8C, 0x83, 0x80, 0x41, 0x46, 0x28,
		0x10, 0x28, 0x44, 0x43, 0x80, 0x80, 0x00 },/*"��",0*/

{ 0x80, 0x40, 0x30, 0x1E, 0x10, 0x10, 0x10, 0xFF, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x00, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7F, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x00 },/*"��",1*/

{ 0x00, 0xF8, 0x0C, 0x0B, 0x08, 0x08, 0xF8, 0x40, 0x30, 0x8F, 0x08, 0x08, 0x08,
		0xF8, 0x00, 0x00, 0x00, 0x7F, 0x21, 0x21, 0x21, 0x21, 0x7F, 0x00, 0x00,
		0x00, 0x43, 0x80, 0x40, 0x3F, 0x00, 0x00 },/*"��",2*/

{ 0x20, 0x24, 0x24, 0xA4, 0xFE, 0x23, 0x22, 0x20, 0xFC, 0x04, 0x04, 0x04, 0x04,
		0xFC, 0x00, 0x00, 0x10, 0x08, 0x06, 0x01, 0xFF, 0x01, 0x06, 0x80, 0x63,
		0x19, 0x01, 0x01, 0x09, 0x33, 0xC0, 0x00 },/*"��",3*/

{ 0x80, 0x40, 0x20, 0x90, 0x88, 0x86, 0x80, 0x80, 0x80, 0x83, 0x8C, 0x10, 0x20,
		0x40, 0x80, 0x00, 0x00, 0x80, 0x40, 0x20, 0x18, 0x07, 0x00, 0x40, 0x80,
		0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"��",4*/

{ 0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x10, 0xE8, 0x27, 0x24, 0xE4, 0x34, 0x2C,
		0xE0, 0x00, 0x00, 0x02, 0x42, 0x81, 0x7F, 0x00, 0x84, 0x84, 0x47, 0x24,
		0x1C, 0x07, 0x1C, 0x24, 0x47, 0x84, 0x00 }, /*"��",5*/
};

#ifdef SPI_Intface
void OLED::GPIOInit() {
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

	GPIO_InitStructure.GPIO_Pin = CS_PIN | DC_PIN | RES_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	CS_SET;
	DC_SET;
	RES_SET;
}
#endif

void OLED::Init() {
#ifdef I2C_Intface
	I2C::init();
#endif
#ifdef SPI_Intface
	GPIOInit();
	U_SPI1::Init(SPI1_Speed_18M);
	CS_RESET;
	RES_RESET;
	{
		volatile uint16_t i = 10000;
		while (i--)
			;
	}
	RES_SET;
	CS_SET;
#endif
//���ϵ絽���濪ʼ��ʼ��Ҫ���㹻��ʱ�䣬���ȴ�RC��λ���
	Write(0xae, WriteMode_Cmd);
	Write(0xae, WriteMode_Cmd); //--turn off oled panel
	Write(0x00, WriteMode_Cmd); //---set low column address
	Write(0x10, WriteMode_Cmd); //---set high column address
	Write(0x40, WriteMode_Cmd); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
	Write(0x81, WriteMode_Cmd); //--set contrast control register
	Write(0xcf, WriteMode_Cmd); // Set SEG Output Current Brightness
	Write(0xa1, WriteMode_Cmd); //--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
	Write(0xc8, WriteMode_Cmd); //Set COM/Row Scan Direction   0xc0���·��� 0xc8����
	Write(0xa6, WriteMode_Cmd); //--set normal display
	Write(0xa8, WriteMode_Cmd); //--set multiplex ratio(1 to 64)
	Write(0x3f, WriteMode_Cmd); //--1/64 duty
	Write(0xd3, WriteMode_Cmd); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
	Write(0x00, WriteMode_Cmd); //-not offset
	Write(0xd5, WriteMode_Cmd); //--set display clock divide ratio/oscillator frequency
	Write(0x80, WriteMode_Cmd); //--set divide ratio, Set Clock as 100 Frames/Sec
	Write(0xd9, WriteMode_Cmd); //--set pre-charge period
	Write(0xf1, WriteMode_Cmd); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	Write(0xda, WriteMode_Cmd); //--set com pins hardware configuration
	Write(0x12, WriteMode_Cmd);
	Write(0xdb, WriteMode_Cmd); //--set vcomh
	Write(0x40, WriteMode_Cmd); //Set VCOM Deselect Level
	Write(0x20, WriteMode_Cmd); //-Set Page Addressing Mode (0x00/0x01/0x02)
	Write(0x02, WriteMode_Cmd); //
	Write(0x8d, WriteMode_Cmd); //--set Charge Pump enable/disable
	Write(0x14, WriteMode_Cmd); //--set(0x10) disable
	Write(0xa4, WriteMode_Cmd); // Disable Entire Display On (0xa4/0xa5)
	Write(0xa6, WriteMode_Cmd); // Disable Inverse Display On (0xa6/a7)
	Write(0xaf, WriteMode_Cmd); //--turn on oled panel
	Fill(0x00); //��ʼ����
	SetPos(0, 0);
}

void OLED::Write(uint8_t data, WriteMode_Typedef mode) {
#ifdef I2C_Intface
	if (mode == WriteMode_Cmd)
	I2C::send(OLED_Address, (uint8_t) 0x00, data);
	else if (mode == WriteMode_Data)
	I2C::send(OLED_Address, (uint8_t) 0x40, data);
#endif
#ifdef SPI_Intface
	CS_RESET;
	if (mode == WriteMode_Cmd) {
		DC_RESET;
	} else {
		DC_SET;
	}
	U_SPI1::SendSync(data);
	CS_SET;
#endif
}

void OLED::SetPos(uint8_t x, uint8_t y) {
	Write(0xb0 + y, WriteMode_Cmd);
	Write(((x & 0xf0) >> 4) | 0x10, WriteMode_Cmd);
	Write((x & 0x0f) | 0x00, WriteMode_Cmd);
}

void OLED::Fill(uint8_t bmp_dat) {
	uint8_t y, x;
	for (y = 0; y < 8; y++) {
		SetPos(0, y);
		for (x = 0; x < 128; x++)
			Write(bmp_dat, WriteMode_Data);
	}

}

void OLED::Print(uint8_t x, uint8_t y, uint8_t* str, CharMode_Typedef mode) {
	while (x <= (128 - (128 % mode) - mode) && *str != '\0') //�������һλ��дλ && ѭ������ַ�
	{
		Print_c(x, y, *str, mode);
		x += mode;
		str++;
	}
}

void OLED::Print(uint8_t x, uint8_t y, int32_t num, CharMode_Typedef mode) {
	uint8_t str[20];
	byNumber(num, 10, str);
	Print(x, y, str, mode);
}

void OLED::Print(uint8_t x, uint8_t y, double lf, uint8_t ndigit,
		CharMode_Typedef mode) {
	uint8_t str[20];
	byFloat(lf, ndigit, str);
	Print(x, y, str, mode);
}

void OLED::Print_c(uint8_t x, uint8_t y, uint8_t c, CharMode_Typedef mode) {
	SetPos(x, y);
	switch (mode) {
	case CharMode_6x8:
		for (uint8_t i = 0; i < 6; i++) {
			Write(F6x8[c - 32][i], WriteMode_Data);
		}
		break;
	case CharMode_8x16:
		for (uint8_t i = 0; i < 8; i++) {
			Write(F8x16[c - 32][i], WriteMode_Data);
		}
		SetPos(x, y + 1);
		for (uint8_t i = 8; i < 16; i++) {
			Write(F8x16[c - 32][i], WriteMode_Data);
		}
		break;
	case CharMode_16x16:
		for (uint8_t i = 0; i < 16; i++) {
			Write(F16x16[c - 32][i], WriteMode_Data);
		}
		SetPos(x, y + 1);
		for (uint8_t i = 16; i < 32; i++) {
			Write(F16x16[c - 32][i], WriteMode_Data);
		}
		break;
	}
}

